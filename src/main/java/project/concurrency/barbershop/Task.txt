Парикмахерская.

Реализовать симуляцию работы в парикмахерской.
Есть определенное количество посетителей которые хотят попасть в парикмахерсую.
В парикмахерской работает парикмахер, который может обсужить только одного клиента в определенный промежуток времени.

- создать 10 посетителей (каждый посетитель - отдельный поток)                                                           - DONE

- создать парикмахера (пока для простоты будем считать, что работает только он один)                                     - DONE

- парикмахер обслуживает только одного посетителя в конкретный момент                                                    - DONE

- время обслуживания - от 1 до 7 секунд (вычисляется произвольно, см. Math.random())                                     - DONE

- пока один клиент обслуживается, остальные ждут своей очереди                                                           - DONE

- после того, как клиент обслужен - его поток завершается,
    а парикмахер начинает обслуживать любого из тех, кто ожидает очереди                                                 - DONE

- приложение завершается только тогда, когда все клиенты обслужены                                                       - DONE

- в консоль должен быть выведен процесс выполнения программы, н-р:                                                       - DONE
- клиент Х создан
- клиент Х обслуживается парикмахером Y
- клиент X обслужен за N секунд
- и т.д.
- тесты писать не нужно

Расширение 1:                                                                                                            - DONE
    - каждые 2 секунды создается новый посетитель;
        общее число посетителей, которое должно создаться во время выполнения программы,
        задается параметром метода/класса (зависит от реализации)
Расширение 2:
    - добавить возможность работы нескольких парикмахеров,
        что позволит обслущить больше клиентов за один и тот же промежуток времени
Расширение 3:
    - выстроить очередь из посетителей, т.е. тот, кто пришел раньше,
        обязательно должен быть обслужен раньше, чем тот, что пришел после него